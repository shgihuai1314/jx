<?phpnamespace console\controllers;use system\core\utils\Tool;use system\modules\course\models\Course;use system\modules\course\models\CourseAnnex;use system\modules\course\models\CourseChapter;use system\modules\course\models\CourseFile;use system\modules\course\models\CourseLessonTask;use system\modules\course\models\CoursePlan;use system\modules\course\models\CourseSource;use system\modules\course\models\CourseTeam;use system\modules\user\models\Group;use system\modules\user\models\User;use yii\console\Controller;use yii\db\Exception;use yii\helpers\ArrayHelper;use yii\helpers\FileHelper;use yii\helpers\Json;class CourseImportController extends Controller{    public static $courseModel = null;  // 课程模型    public static $chapterModel = null; // 目录模型    public static $fileModel = null;    // 课程文件模型    public static $sourceModel = null;  // 文件资源模型    public static $annexModel = null;   // 附件模型    public static $taskModel = null;    // 任务模型    public static $teamModel = null;    // 教学团队模型    public static $cate_id = 96; // 课程分类    public static $coursesDir = null;   // 课程文件夹    /**     * 导入课程     * @return bool     */    public function actionStart()    {        $path = $this->getCoursesDir();     // courses目录        //print_r($path);exit;        $pathArr = $this->getDir($path);    // 目录数组        foreach ($pathArr as $courseName) {            if (!file_exists($path . '/' . $courseName . '/' . 'info.json')) {                echo @iconv('utf-8', 'gb2312//IGNORE', $courseName . ' json file not found');                \Yii::info(@iconv('utf-8', 'gb2312//IGNORE', $courseName . ' json file not found'));                return false;            }            // 单个课程json数据            $courseInfo = Json::decode(file_get_contents($path . '/' . $courseName . '/' . 'info.json'), true);            // 单个课程目录            $itemPath = $path . '/' .   $courseName;            if (is_file($itemPath . '/sign.json')) {                continue;                //return false;            }            // 保存课程            $courseId = $this->saveCourse($courseInfo, $itemPath);            if (!$courseId) {                echo @iconv('utf-8', 'gb2312//IGNORE', $courseName . ' import fail' . PHP_EOL);                \Yii::info(@iconv('utf-8', 'gb2312//IGNORE', $courseName . ' import fail'));                //return false;                continue;            }            // 保存计划            $res = $this->savePlan($courseInfo['plan'], $courseId, $itemPath);            if (!$res) {                echo @iconv('utf-8', 'gb2312//IGNORE', $courseName . ' save plan failed');                \Yii::info(@iconv('utf-8', 'gb2312//IGNORE', $courseName . ' save plan failed'));                self::removeCourse($courseId);                continue;                //return false;            } else {                //$course = Course::getOneById($courseId);                //CoursePlan::findOne($course['default_plan'])->submit();                file_put_contents($itemPath. '/sign.json', time());            }            //continue;            //return true;        }    }    /**     * 课程文件目录     * @return bool|null|string     */    private function getCoursesDir()    {        if (!self::$coursesDir) {            self::$coursesDir = \Yii::getAlias('@courses');        }        return self::$coursesDir;    }    /**     * 读取文件目录     * @param string $dir 目录     * @param     * @return array     */    private function getDir($dir, $require_all = false)    {        $files = array();        if ($handle = opendir($dir)) { //注意这里要加一个@，不然会有warning错误提示：）            while (($file = readdir($handle)) !== false) {                if ($file != ".." && $file != ".") { //排除根目录；                    if (!$require_all) {                        $files[] = $file;                    } else {                        if (is_dir($dir . "/" . $file)) { //如果是子文件夹，就进行递归                            $files[$file] = $this->getDir($dir . "/" . $file, $require_all);                        } else { //不然就将文件的名字存入数组；*/                            $files[] = $file;                        }                    }                }            }            closedir($handle);            return $files;        }    }    /**     * 初始化课程模型     * @return null|Course     */    private function initNewCourse()    {        if (!self::$courseModel) {            self::$courseModel = new Course();        }        return self::$courseModel;    }    /**     * 初始化章节模型     * @return null|CourseChapter     */    private function initNewChapter()    {        if (!self::$chapterModel) {            self::$chapterModel = new CourseChapter();        }        return self::$chapterModel;    }    /**     * 初始化课程文件模型     * @return null|CourseFile     */    private function initNewFile()    {        if (!self::$fileModel) {            self::$fileModel = new CourseFile();        }        return self::$fileModel;    }    /**     * 初始化教学团队模型     * @return null|CourseSource     */    private function initNewSource()    {        if (!self::$sourceModel) {            self::$sourceModel = new CourseSource();        }        return self::$sourceModel;    }    /**     * 初始化任务模型     * @return null|CourseLessonTask     */    private function initNewTask()    {        if (!self::$taskModel) {            self::$taskModel = new CourseLessonTask();        }        return self::$taskModel;    }    /**     * 初始化任务模型     * @return null|CourseAnnex     */    private function initNewAnnex()    {        if (!self::$annexModel) {            self::$annexModel = new CourseAnnex();        }        return self::$annexModel;    }    /**     * 初始化任务模型     * @return null|CourseTeam     */    private function initNewTeam()    {        if (!self::$teamModel) {            self::$teamModel = new CourseTeam();        }        return self::$teamModel;    }    /**     * 保存课程信息     * @param array $courseInfo 课程数据     * @param string $coursePath 课程目录     * @return bool|int     */    private function saveCourse($courseInfo, $coursePath)    {        $userId = $this->getUser($courseInfo['author']);        if (!$userId) {            echo 'course:' . @iconv('utf-8', 'gb2312//IGNORE',$courseInfo['title']) . 'can not find author';            \Yii::info('course:' . @iconv('utf-8', 'gb2312//IGNORE',$courseInfo['title']) . 'can not find author');            return false;        }        $courseModel = clone $this->initNewCourse();        $courseModel->loadDefaultValues();        $courseModel->is_import = true;        $courseModel->name = $courseInfo['title'];        $courseModel->description = '<p>' . $courseInfo['description'] . '<p>';        $courseModel->create_by = $userId;        $courseModel->cate_id = self::$cate_id;        // 移动封面图        if (key_exists('pic', $courseInfo) && ($thumb_img = $this->copyTo($coursePath . '/' . $courseInfo['pic'])) != false) {            $fileHost = \Yii::$app->systemConfig->getValue('FILE_SERVER_HOST', '');            $courseModel->thumb_img = $fileHost.$thumb_img;        }        if ($courseModel->save()) {            return $courseModel->id;        } else {            return false;        }    }    /**     * 保存文件     * @param string $sourceFile 要保存的文件路径     * @return bool|string     * @throws Exception     */    public static function copyTo($sourceFile)    {        $destDir = \Yii::getAlias('@webroot');        $filePath = '/upload/course/import/source/' . date('Y') . '/' . date('m') . '/' . date('d') . '/';        $file_name = time() . rand(10000, 99999);        // 使用的文件的扩展        $useFileExt = array('doc', 'docx', 'ppt', 'pptx', 'xls', 'xlsx', 'pdf', 'jpg', 'gif', 'png', 'mp4', 'flv', 'wmv', 'swf');        $ext = pathinfo($sourceFile, PATHINFO_EXTENSION);        if (in_array($ext, $useFileExt)) {            //创建文件所在的目录            if (!is_dir($destDir . $filePath)) {                if (!FileHelper::createDirectory($destDir . $filePath)) {                    return false;                }            }            $newFileName = $destDir . $filePath . $file_name . '.' . $ext;            // 如果文件不存在，那么复制过去            if (copy($sourceFile, $newFileName)) {                return $filePath . $file_name . '.' . $ext;            }        }        return false;    }    /**     * @param array $plan 课程计划信息     * @param integer $course_id 所属课程ID     * @param string $coursePath 单个课程目录     * @throws Exception     */    public function savePlan($plan, $course_id, $coursePath)    {        $courseModel = Course::getOneById($course_id);        if (count($plan) == 1) {            // 默认计划            $planName = @iconv('utf-8', 'gb2312//IGNORE', '默认计划');            if (!is_dir($coursePath . '/' .  '默认计划'. '/' . 'courseFiles')) {                echo $coursePath . '/' .  '默认计划'. '/' . 'courseFiles' . 'not found';                \Yii::info($coursePath . '/' .  '默认计划'. '/' . 'courseFiles' . 'not found');                return false;            }            // 计划目录数组            $directory = self::getDir($coursePath . '/' .  '默认计划'. '/' . 'courseFiles', true);            $planModel = CoursePlan::findOne($courseModel['default_plan']);            $planModel->name = @iconv('gb2312//IGNORE', 'utf-8', $planName);            $planModel->price = $plan[@iconv('gb2312//IGNORE', 'utf-8', $planName)]['price'];            $planModel->directory_mode = 1;            if (!$planModel->save()) {                return false;                //return false;            }            // 课程对应的文件夹            $courseFile = CourseFile::findOne($courseModel['file_id']);            $chapterMode = $plan[@iconv('gb2312//IGNORE', 'utf-8', $planName)]['mode'];            // 保存目录章信息            if ($chapterMode == 'chapters') {                foreach ($directory as $sectionIndex => $item) {                    list($chapterSort, $value) = self::getChapterTitle($sectionIndex);                    $chapterId = $this->saveChapter([                        'title' => $value,                        'type' => 'chapter',                        'pid' => 0,                        'plan_id' => $courseModel['default_plan'],                        'create_by' => $courseModel['create_by'],                        'sort' => $chapterSort                    ]);                    if (!$chapterId) {                        //throw new Exception('chapter:'.$value . ' import fail');                        echo $coursePath . ' section:' . $value . ' import fail';                        \Yii::info($coursePath . ' section:' . $value . ' import fail');                        return false;                        //continue;                    }                    //echo 'chapter:'. $value . ' import success, ID:' . $chapterId . PHP_EOL;                    // 保存单元信息                    foreach ($item as $lessonKey => $itemValue) {                       list($unitSort, $unitName) = self::getChapterTitle($lessonKey);                        $unitId = $this->saveChapter([                            'title' => $unitName,                            'type' => 'unit',                            'pid' => $chapterId,                            'plan_id' => $courseModel['default_plan'],                            'create_by' => $courseModel['create_by'],                            'sort' => $unitSort                        ]);                        if (!$unitId) {                            //throw new Exception('unit:'.$unitName . ' import fail');                            echo $coursePath . ' unit:' . $unitName . ' import fail';                            \Yii::info($coursePath . ' unit:' . $unitName . ' import fail');                            return false;                            //continue;                        }                        //echo 'unit:'. $unitName . ' import success, ID:' . $unitId . PHP_EOL;                        // 保存课时信息                        foreach ($itemValue as $taskValue) {                            $absolute_path = $coursePath . '/' . @iconv('gb2312//IGNORE', 'utf-8', $planName) . '/courseFiles/'. $sectionIndex . '/' .  $lessonKey . '/' .  $taskValue;                            if (is_file($absolute_path)) {                                $title = pathinfo($absolute_path, PATHINFO_FILENAME);                                $lessonName = self::getChapterTitle($title);                                //$lessonTitle = $lessonName;                                //list($lessonTitle, $creator) = explode('-', $lessonName);                                list($lessonSort,$insertTitle) = $lessonName;                                $lessonId = $this->saveChapter([                                    'title' => $insertTitle,                                    'type' => 'lesson',                                    'pid' => $unitId,                                    'plan_id' => $courseModel['default_plan'],                                    'create_by' => $courseModel['create_by'],                                    'sort' => $lessonSort                                ]);                                if (!$lessonId) {                                    //throw new Exception('unit:'.$unitName . ' import fail');                                    echo $coursePath . ' lesson:' . $unitName . ' import fail';                                    \Yii::info($coursePath . ' lesson:' . $unitName . ' import fail');                                    //continue;                                    return false;                                }                                $source = self::copyTo($absolute_path);                                if (!$source) {                                    echo $coursePath .' copy ' . $absolute_path . ' failed';                                    \Yii::info($coursePath .' copy ' . $absolute_path . ' failed');                                    return false;                                }                                // 保存资源                                $file_id = $this->saveFile($source, $insertTitle, $courseFile, $courseModel['create_by']);                                if (!$file_id) {                                    echo 'save file  ' . $source . ' failed';                                    \Yii::info('save file  ' . $source . ' failed');                                    return false;                                }                                // 设置任务                                if (!$this->saveTask($file_id, $lessonId, $insertTitle, $planModel->id)) {                                    echo $coursePath . ' set task '. $insertTitle . ' failed';                                    \Yii::info($coursePath . ' set task '. $insertTitle . ' failed');                                    return false;                                }                                //echo 'lesson:'. $lessonName . ' import success, ID:' . $lessonId . PHP_EOL;                            } else {                                // 文件不存在                                echo $absolute_path.' does not exist'.PHP_EOL;                                \Yii::info($absolute_path.' does not exist'.PHP_EOL);                                return false;                            }                        }                    }                }            }            // 计划附件            $annexFilePath = $coursePath . '/' .  @iconv('gb2312//IGNORE', 'utf-8', $planName) . '/files';            if (is_dir($annexFilePath)) {                $annex = $this->getDir($annexFilePath);                // 保存附件信息                foreach ($annex as $index => $file) {                    if ($file != '.' && $file != '..') {                        $absolute_path = $annexFilePath . '/' . $file;                        if (is_file($absolute_path)) {                            $title = pathinfo($absolute_path, PATHINFO_FILENAME);                            $source = self::copyTo($absolute_path);                            if (!$source) {                                echo $absolute_path . ' copy failed';                                return false;                            }                            // 保存资源                            $file_id = $this->saveFile($source,  $title, $courseFile, $courseModel['create_by']);                            if (!$file_id) {                                echo 'save file ' . $source . ' failed';                                \Yii::info('save file ' . $source . ' failed');                                return false;                            }                            // 设置为附件                            if (!$this->saveAnnex($file_id, $planModel->id, $courseModel['create_by'])) {                                echo 'set annex ' . $file_id . ' failed';                                \Yii::info('set annex ' . $file_id . ' failed');                                return false;                            }                        } else {                            echo $absolute_path . ' not found';                            \Yii::info($absolute_path . ' not found');                            return false;                        }                    }                }            }            $team = isset(reset($plan)['team']) ? reset($plan)['team'] : [];            if ($team) {                // 保存教师团队                $this->saveTeam(reset($plan)['team'], $planModel->id);            }            return true;        } else {            // 多个计划            return false;        }    }    /**     * 保存章节信息     * @param $data     * @return bool|int     */    private function saveChapter($data)    {        $chapterModel = clone $this->initNewChapter();        $chapterModel->loadDefaultValues();        $chapterModel->is_import = true;        if ($chapterModel->load($data, '') && $chapterModel->save()) {            return $chapterModel->id;        } else {            return false;        }    }    /**     * 保存课程文件     * @param $courseFile     * @param $filename     * @param $parent_dir     * @param $user_id     * @return bool|int     */    private function saveFile($courseFile, $filename, $parent_dir, $user_id)    {        $source_id = $this->saveSource($courseFile, $parent_dir['user_id']);        $fileModel = clone $this->initNewFile();        $fileModel->is_import = true;        $fileModel->loadDefaultValues();        $data = [            'title' => $filename,            'dir_id' => $parent_dir['id'],            'type' => 1,            'status' => CourseFile::FILE_UNUSED,            'source_id' => $source_id,            'used_count' => 0,            'user_id' => $user_id,        ];        if ($fileModel->load($data, '') && $fileModel->save()) {            return $fileModel->id;        } else {            var_dump($fileModel->getErrors());            return false;        }    }    /**     * 保存文件资源     * @param $source     * @param $create_by     * @return bool|int     */    private function saveSource($source, $create_by)    {        $file_name = pathinfo(\Yii::getAlias('@webroot') . $source, PATHINFO_FILENAME);        $file_size = filesize(\Yii::getAlias('@webroot') . $source);        $file_extension = pathinfo(\Yii::getAlias('@webroot') . $source, PATHINFO_EXTENSION);        $file_type = Tool::getFileType(FileHelper::getMimeType($source));        $sourceModel = clone $this->initNewSource();        $sourceModel->loadDefaultValues();        $sourceModel->is_import = true;        $data = [            'file_name' => $file_name,            'file_type' => $file_type,            'file_path' => $source,            'file_size' => $file_size,            'file_extension' => $file_extension,            'create_by' => $create_by,            'from_type' => 'import'            ];        if ($sourceModel->load($data, '') && $sourceModel->save()) {            return $sourceModel->id;        } else {            return false;        }    }    /**     * 保存任务     * @param $file_id     * @param $lessonId     * @param $lessonName     * @param $plan_id     * @return bool     */    private function saveTask($file_id, $lessonId, $lessonName, $plan_id)    {        $taskModel = clone $this->initNewTask();        $taskModel->loadDefaultValues();        $file = CourseFile::findOne($file_id);        $source = $file->source;        $options = ['condition' => 0];        if ($source->file_type == 'video') {            $options['allow_drag'] = 1;            $type = CourseLessonTask::VIDEO_TASK;        } else {            $type = CourseLessonTask::DOC_TASK;        }        $data = [            'type' =>  $type,            'title' => $lessonName,            'plan_id' => $plan_id,            'lesson_id' => $lessonId,            'target_id' => $file_id,            'options' => Json::encode($options)        ];        return $taskModel->load($data, '') && $taskModel->save();    }    /**     * 保存附件     * @param $source_id     * @param $plan_id     * @return bool     */    private function saveAnnex($source_id, $plan_id, $user_id)    {        $annexModel = clone $this->initNewAnnex();        $annexModel->loadDefaultValues();        $annexModel->is_import = true;        $data = [            'file_id' => $source_id,            'plan_id' =>  $plan_id,            'create_by' => $user_id,        ];        return $annexModel->load($data, '') && $annexModel->save();    }    /**     * 获取用户信息     * @param $author     * @return bool|int|mixed     */    private function getUser($author)    {        $sql = User::find()->where(['realname' => $author['realname']]);        $count = $sql->count();        if ($count == 0) {  // 没有找到用户返回false            $user =  false;        } elseif ($count == 1) { // 单个用户，直接命中            $user = $sql->asArray()->one();        } else {    // 多个用户继续比对部门            $group_id = Group::find()->select('id')->where(['name' => $author['group']])->column();            if ($group_id) {                $sql->andWhere(['group_id' => $group_id]);            }            $user = $sql->asArray()->one();        }        if (!$user) {            return false;        } else {            return $user['user_id'];        }    }    /**     * 保存教学团队     * @param $team     * @param $plan_id     */    private function saveTeam($team, $plan_id)    {        foreach ($team as $key => $item) {            $user_id = $this->getUser($item);            if (!$user_id) {                continue;            }            $data[] = [                'plan_id' => $plan_id,                'user_id' => $this->getUser($item),                'permission' => 'exam_review|topic_manage|homework_review|group_setting',            ];        }        \Yii::$app->db->createCommand()->batchInsert(CourseTeam::tableName(), ['plan_id', 'user_id', 'permission'], $data)->execute();    }    /**     * 删除课程     * @param $course_id     */    public static function removeCourse($course_id)    {        $course = Course::findOne($course_id);        if (!$course) {            return;        }        $plansIds = CoursePlan::find()->select('id')->where(['course_id' => $course_id])->column(); // 计划ID        self::removeSource($course->thumb_img);        $course->delete();        CoursePlan::deleteAll(['id' => $plansIds]);        CourseChapter::deleteAll(['plan_id' => $plansIds]);        CourseLessonTask::deleteAll(['plan_id' => $plansIds]);        CourseTeam::deleteAll(['plan_id' => $plansIds]);        CourseAnnex::deleteAll(['plan_id' => $plansIds]);        $files = CourseFile::find()->where(['dir_id' => $course->file_id])->asArray()->all();  // 课程文件ID        $fileIds = ArrayHelper::getColumn($files, 'id');        $fileIds[] = $course->file_id;        CourseFile::deleteAll(['id' => $fileIds]);        $sourceIds = ArrayHelper::getColumn($files, 'source_id');        $source = CourseSource::findAll(['id' => $sourceIds]);        foreach ($source as $key => $value) {            self::removeSource($value->file_path);  // 删除资源原始文件            if ($value->trans_path) {       // 删除转码文件                $path = Json::decode($value->trans_path);                foreach ($path as $index => $item) {                    self::removeSource($value->file_path);                }            }        }        CourseSource::deleteAll(['id' => $sourceIds]);    }    public static function removeSource($path)    {        $dist = \Yii::getAlias('@webroot');        if (is_file($dist . $path)) {            unlink($dist . $path);        }    }    public function actionRemove($course_id)    {        self::removeCourse($course_id);    }    public static function getChapterTitle($title)    {        $index = mb_strpos($title,',');        if ($index === false) {            return [0, $title];        } else {            return [mb_substr($title, 0,$index), mb_substr($title, $index+1)];        }    }}